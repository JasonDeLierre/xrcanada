{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n\n      // In case the user select the option with their mouse, we\n      // want to restore focus back to the trigger, in order to\n      // prevent the select keyboard controls from clashing with\n      // the ones from `mat-option`.\n      this.focus();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._focusIndex;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.2.1');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'autocomplete': 'off',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string) {\n    super(_differs, _changeDetectorRef, _elementRef, role);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // If we've got a step with a decimal, we may end up with something like 33.300000000000004.\n      // Truncate the value to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        closestValue = parseFloat(closestValue.toFixed(this._roundToDecimal));\n      }\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth = this._defaults ? this._defaults.strokeWidth : undefined;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = this._defaults && this._defaults.diameter ?\n      this._defaults.diameter : BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 _animationMode and _defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private _defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withTransformOriginOn('.mat-menu-panel')\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","MatTabHeader","prototype","_updateTabScrollPosition","scrollDistance","this","translateX","_getLayoutDirection","_tabList","nativeElement","style","transform","Object","defineProperty","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_checkScrollingControls","_scrollHeader","scrollDir","viewLength","_tabListContainer","offsetWidth","_scrollToLabel","labelIndex","selectedLabel","_labelWrappers","toArray","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","_checkPaginationEnabled","isEnabled","scrollWidth","_elementRef","_showPaginationControls","_changeDetectorRef","markForCheck","_disableScrollBefore","_disableScrollAfter","_alignInkBarToSelectedTab","selectedLabelWrapper","length","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","indexFocused","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_this","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","value","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","emit","Promise","resolve","then","forEach","tab","index","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","subscribe","ngOnDestroy","unsubscribe","realignInkBar","_tabHeader","_focusChanged","event","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_dir","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","dirChange","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","dir","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_selectedIndexChanged","_realignInkBar","_tabLabelCount","_updatePagination","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_isValidIndex","_setTabFocus","containerEl","scrollLeft","_moveFocus","offset","tabs","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","parseFloat","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","mode","animationMode","defaults","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_defaults","_strokeWidth","strokeWidth","_fallbackAnimation","_diameter","diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_isAnimating","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","svgElement","_svgElementFromString","svgText","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","_disabledChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","activeDate","addCalendarYears","_activeDate","yearsPerPage","_yearSelected","getYear","_focusActiveCell","_getActiveCell","_matCalendarBody","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogConfig","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","_viewportSubscription","_componentDestroyed","_destroyPanel","_closeKeyEventStream","_overlayAttached","autocomplete","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","optionSelections","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","_autocompleteDisabled","[attr.aria-autocomplete]","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","autocompleteDisabled","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","stopImmediatePropagation","_emitSelectionChangeEvent","setActiveStyles","_active","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}