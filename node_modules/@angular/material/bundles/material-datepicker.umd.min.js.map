{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n"],"names":["styles","host","class","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","MatCalendar","ctorParameters","type","MatDatepickerIntl","propDecorators","headerComponent","Input","startAt","minDate","maxDate","dateFilter","selectedChange","Output","yearSelected","monthSelected","_userSelection","monthView","ViewChild","args","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","transformPanel","trigger","state","style","opacity","transform","transition","group","query","animateChild","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_elementRef","this","_MatDatepickerContentMixinBase","mixinColor","MatDatepickerContent","elementRef","_super","call","tslib_1.__extends","prototype","ngAfterViewInit","_calendar","focusActiveCell","Component","selector","template","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","inputs","_overlay","_ngZone","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","unsubscribe","complete","_popupRef","dispose","_popupComponentRef","_selected","date","sameDate","oldValue","_selectedChanged","_datepickerInput","Error","input","_valueChange","subscribe","value","_this","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","emit","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","instance","onStable","asObservable","pipe","take","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPush","withPositions","originX","originY","overlayX","overlayY","color","decorators","MatDialog","undefined","Inject","DateAdapter","Optional","Directionality","DOCUMENT","calendarHeaderComponent","disabled","opened","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","_formatValue","_min","_max","coerceBooleanProperty","element","blur","ngAfterContentInit","selected","ngOnDestroy","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","_getThemePalette","_onBlur","format","display","obj","isDateInstance","Directive","providers","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","markForCheck","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","ContentChild","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","MatCalendarBody","MatCalendarHeader","declarations","entryComponents","MatDatepickerModule","__extends","d","b","__","constructor","extendStatics","provider","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","providedIn","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","_focusActiveCell","runOutsideAngular","querySelector","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","isRtl","_isRtl","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","d1","d2","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","changeDetectorRef","stateChanges","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","ChangeDetectorRef","_intlChanges","_moveFocusOnNextTick","_currentView","startView","change","firstChange","view","_getCurrentViewComponent"],"mappings":";;;;;;;i8CMoBA,SAAgB4T,GAAUC,EAAGC,GAEzB,QAASC,KAAOrQ,KAAKsQ,YAAcH,EADnCI,EAAcJ,EAAGC,GAEjBD,EAAE3P,UAAkB,OAAN4P,EAAazO,OAAO+D,OAAO0K,IAAMC,EAAG7P,UAAY4P,EAAE5P,UAAW,GAAI6P,ICdnF,QAAA3O,GAA2C8O,GACzC,MAAOtN,OACH,wCAAwCsN,EAD9C,0JL6CA,QAAA3Q,GAAuD4Q,GACrD,MAAO,YAAM,MAAAA,GAAQC,iBAAiBC,cIxCxC,GAAIJ,GAAgB5O,OAAOiP,iBACpBC,uBAA2BC,QAAS,SAAUX,EAAGC,GAAKD,EAAEU,UAAYT,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIW,KAAKX,GAAOA,EAAEY,eAAeD,KAAIZ,EAAEY,GAAKX,EAAEW,+BECzE/Q,KAAAsO,QAAoC,GAAI2C,GAAAA,QAGxCjR,KAAAkR,cAA0B,WAG1BlR,KAAAmR,kBAA8B,gBAG9BnR,KAAAoR,eAA2B,iBAG3BpR,KAAAqR,eAA2B,aAG3BrR,KAAAsR,cAA0B,gBAG1BtR,KAAAuR,cAA0B,YAG1BvR,KAAAwR,mBAA+B,oBAG/BxR,KAAAyR,mBAA+B,gBAG/BzR,KAAA0R,uBAAmC,cAGnC1R,KAAA2R,2BAAuC,wBAjDvC,sBAaAzU,KAAC0U,EAAAA,WAAD1T,OAAa2T,WAAY,8GAbzB1U,KCwBA2U,EAAA,WACE,QAAFA,GAAqBxO,EACAyO,EACAC,EACAC,GAHAjS,KAArBsD,MAAqBA,EACAtD,KAArB+R,aAAqBA,EACA/R,KAArBgS,UAAqBA,EACAhS,KAArBiS,QAAqBA,EA5BrB,MAAAH,mBAoFE,QAAFjC,GAAsB9P,EAAiCqB,GAAjCpB,KAAtBD,YAAsBA,EAAiCC,KAAvDoB,QAAuDA,EAjBvDpB,KAAAkS,QAAqB,EAGrBlS,KAAAmS,wBAAoC,EAGpCnS,KAAAoS,WAAwB,EAMxBpS,KAAAqS,gBAA6B,EAG7BrS,KAAAsS,oBAAiE,GAAI/J,GAAAA,aAArE,MAIEsH,GAAFrP,UAAA+R,aAAE,SAAaC,IACNxS,KAAKmS,wBAA2BK,EAAKP,UAG1CjS,KAAKsS,oBAAoBvO,KAAKyO,EAAKlP,QAIrC3B,OAAFC,eAAMiO,EAANrP,UAAA,uBAAE,WACE,MAAOR,MAAKyS,MAAQzS,KAAKyS,KAAKC,QAAU1S,KAAKyS,KAAK,GAAGC,OACjD1S,KAAKkS,QAAUlS,KAAKyS,KAAK,GAAGC,OAAS,mCAG3C7C,EAAFrP,UAAAmS,cAAE,SAAcC,EAAkBC,GAC9B,GAAIC,GAAaF,EAAW5S,KAAKkS,QAAUW,CAO3C,OAJID,KACFE,GAAc9S,KAAK+S,iBAGdD,GAAc9S,KAAKoS,YAI5BvC,EAAFrP,UAAAwS,iBAAE,WAAA,GAAFzP,GAAAvD,IACIA,MAAKoB,QAAQ6R,kBAAkB,WAC7B1P,EAAKnC,QAAQ8D,SAASC,eAAeC,KAAKC,EAAAA,KAAK,IAAIhC,UAAU,WAC3DE,EAAKxD,YAAYqJ,cAAc8J,cAAc,6BAA6B1O,4BA9ElFtH,KAAC0D,EAAAA,UAAD1C,OAAA2C,SAAA,sBACEC,SAAU,q1CACVxE,QAAF,g0BACEC,MACFC,MAAA,oBACM2W,KAAN,OACIC,qBAAJ,QAEA3W,SAAA,kBACAC,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFA9BA8S,EAAAzS,6DAoCAiW,aAAAnW,KAAQI,EAAAA,QAGRgW,gBAAApW,KAAAI,EAAAA,QAGAiW,wBAAQrW,KAARI,EAAAA,QAGA4U,UAAAhV,KAAAI,EAAAA,QAGA6U,yBAAAjV,KAAAI,EAAAA,QAGA8U,aAAAlV,KAAAI,EAAAA,QAGA+U,kBAAAnV,KAAAI,EAAAA,QAGAgV,sBAAApV,KAAAU,EAAAA,UASAiS,kBCiDE,QAAF1R,GAAsBgQ,EACsC/F,EAC3B7G,EACCC,GAC9B,GAJkBxB,KAAtBmO,mBAAsBA,EACsCnO,KAA5DoI,aAA4DA,EAC3BpI,KAAjCuB,aAAiCA,EACCvB,KAAlCwB,KAAkCA,EAnClCxB,KAAArC,eAA8D,GAAI4K,GAAAA,aAGlEvI,KAAAjC,eAA0D,GAAIwK,GAAAA,aAG9DvI,KAAAwT,iBAAyD,GAAIjL,GAAAA,cA8BpDvI,KAAKuB,aACR,KAAMG,GAA2B,cAEnC,KAAK1B,KAAKoI,aACR,KAAM1G,GAA2B,mBAGnC,IAAM+R,GAAiBzT,KAAKuB,aAAamS,oBACnCC,EAAiB3T,KAAKuB,aAAaqS,kBAAkB,UACrDC,EAAe7T,KAAKuB,aAAaqS,kBAAkB,QAGrDE,EAAWD,EAAaE,IAAI,SAACC,EAAMC,GACrC,OAAQD,KAAdA,EAAoBE,OAAQP,EAAeM,KAEvCjU,MAAKmU,UAAYL,EAASM,MAAMX,GAAgBY,OAAOP,EAASM,MAAM,EAAGX,IAEzEzT,KAAKsU,YAActU,KAAKuB,aAAagT,QA5CzC,MAlDA5S,QAAAC,eAAMzD,EAANqC,UAAA,kBAAA,WAAwB,MAAOR,MAAKsU,iBAClC,SAAehR,GACb,GAAMkR,GAAgBxU,KAAKsU,YACrBG,EACFzU,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,KAAWtD,KAAKuB,aAAagT,OACxFvU,MAAKsU,YAActU,KAAKuB,aAAamT,UAAUD,EAAWzU,KAAKxC,QAASwC,KAAKvC,SACxEuC,KAAK2U,qBAAqBH,EAAexU,KAAKsU,cACjDtU,KAAK4U,yCAOXjT,OAAAC,eAAMzD,EAANqC,UAAA,gBAAA,WAA6B,MAAOR,MAAK4C,eACvC,SAAaU,GACXtD,KAAK4C,UAAY5C,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,IACxEtD,KAAK6U,cAAgB7U,KAAK8U,uBAAuB9U,KAAK4C,4CAM1DjB,OAAAC,eAAMzD,EAANqC,UAAA,eAAA,WAA4B,MAAOR,MAAK+U,cACtC,SAAYzR,GACVtD,KAAK+U,SAAW/U,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,qCAM3E3B,OAAAC,eAAMzD,EAANqC,UAAA,eAAA,WAA4B,MAAOR,MAAKgV,cACtC,SAAY1R,GACVtD,KAAKgV,SAAWhV,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,qCAgEzEnF,EAAFqC,UAAA4K,mBAAE,WACEpL,KAAK4U,SAIPzW,EAAFqC,UAAAyU,cAAE,SAAcpS,GACZ,GAAI7C,KAAK6U,eAAiBhS,EAAM,CAC9B,GAAMqS,GAAelV,KAAKuB,aAAa4T,QAAQnV,KAAKoV,YAC9CC,EAAgBrV,KAAKuB,aAAa+T,SAAStV,KAAKoV,YAChDG,EAAevV,KAAKuB,aAAaiU,WAAWN,EAAcG,EAAexS,EAE/E7C,MAAKrC,eAAeoG,KAAKwR,GAG3BvV,KAAKjC,eAAegG,QAItB5F,EAAFqC,UAAAiV,2BAAE,SAA2BxP,GAKzB,GAAMuO,GAAgBxU,KAAKsU,YAErBoB,EAAQ1V,KAAK2V,QACnB,QAAQ1P,EAAMC,SACZ,IAAK0P,GAAAA,WACH5V,KAAKoV,WAAapV,KAAKuB,aAAasU,gBAAgB7V,KAAKsU,YAAaoB,EAAQ,GAAK,EACnF,MACF,KAAKI,GAAAA,YACH9V,KAAKoV,WAAapV,KAAKuB,aAAasU,gBAAgB7V,KAAKsU,YAAaoB,GAAS,EAAI,EACnF,MACF,KAAKK,GAAAA,SACH/V,KAAKoV,WAAapV,KAAKuB,aAAasU,gBAAgB7V,KAAKsU,aAAc,EACvE,MACF,KAAKlI,GAAAA,WACHpM,KAAKoV,WAAapV,KAAKuB,aAAasU,gBAAgB7V,KAAKsU,YAAa,EACtE,MACF,KAAK0B,GAAAA,KACHhW,KAAKoV,WAAapV,KAAKuB,aAAasU,gBAAgB7V,KAAKsU,YACrD,EAAItU,KAAKuB,aAAa0U,QAAQjW,KAAKsU,aACvC,MACF,KAAK4B,GAAAA,IACHlW,KAAKoV,WAAapV,KAAKuB,aAAasU,gBAAgB7V,KAAKsU,YACpDtU,KAAKuB,aAAa4U,kBAAkBnW,KAAKsU,aACxCtU,KAAKuB,aAAa0U,QAAQjW,KAAKsU,aACrC,MACF,KAAK8B,GAAAA,QACHpW,KAAKoV,WAAanP,EAAMkG,OACpBnM,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,aAAc,GACtDtU,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,aAAc,EAC3D,MACF,KAAKiC,GAAAA,UACHvW,KAAKoV,WAAanP,EAAMkG,OACpBnM,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,YAAa,GACrDtU,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,YAAa,EAC1D,MACF,KAAKkC,GAAAA,MAOH,YANKxW,KAAKtC,aAAcsC,KAAKtC,WAAWsC,KAAKsU,eAC3CtU,KAAKiV,cAAcjV,KAAKuB,aAAa0U,QAAQjW,KAAKsU,cAClDtU,KAAKjC,eAAegG,OAEpBkC,EAAMqG,kBAGV,SAEE,OAGAtM,KAAKuB,aAAaoI,YAAY6K,EAAexU,KAAKoV,aACpDpV,KAAKwT,iBAAiBzP,KAAK/D,KAAKoV,YAGlCpV,KAAKgT,mBAEL/M,EAAMqG,kBAIRnO,EAAFqC,UAAAoU,MAAE,WACE5U,KAAK6U,cAAgB7U,KAAK8U,uBAAuB9U,KAAKqL,UACtDrL,KAAKyW,WAAazW,KAAK8U,uBAAuB9U,KAAKuB,aAAagT,SAChEvU,KAAK0W,YACD1W,KAAKuB,aAAaoV,cAAc,SAAS3W,KAAKuB,aAAa+T,SAAStV,KAAKoV,aACpEwB,mBAET,IAAIC,GAAe7W,KAAKuB,aAAaiU,WAAWxV,KAAKuB,aAAa4T,QAAQnV,KAAKoV,YAC3EpV,KAAKuB,aAAa+T,SAAStV,KAAKoV,YAAa,EACjDpV,MAAK8W,kBA/Ma,EAgNG9W,KAAKuB,aAAawV,aAAaF,GAC/C7W,KAAKuB,aAAamS,qBAjNL,EAmNlB1T,KAAKgX,mBACLhX,KAAKmO,mBAAmBW,gBAI1B3Q,EAAFqC,UAAAwS,iBAAE,WACEhT,KAAKiX,iBAAiBjE,oBAIhB7U,EAAVqC,UAAAwW,4BACI,GAAME,GAAclX,KAAKuB,aAAa4U,kBAAkBnW,KAAKoV,YACvD+B,EAAYnX,KAAKuB,aAAa6V,cACpCpX,MAAKqX,WACL,KAAK,GAAIpD,GAAI,EAAGzB,EAAOxS,KAAK8W,iBAAkB7C,EAAIiD,EAAajD,IAAKzB,IAAQ,CAjO1D,GAkOZA,IACFxS,KAAKqX,OAAOC,SACZ9E,EAAO,EAET,IAAM3P,GAAO7C,KAAKuB,aAAaiU,WACzBxV,KAAKuB,aAAa4T,QAAQnV,KAAKoV,YAC/BpV,KAAKuB,aAAa+T,SAAStV,KAAKoV,YAAanB,EAAI,GACjDhC,EAAUjS,KAAKuX,kBAAkB1U,GACjCmP,EAAYhS,KAAKuB,aAAaqL,OAAO/J,EAAM7C,KAAKoI,aAAayE,QAAQ2K,cAC3ExX,MAAKqX,OAAOrX,KAAKqX,OAAO3E,OAAS,GAC5B4E,KAAK,GAAIxF,GAAgBmC,EAAI,EAAGkD,EAAUlD,GAAIjC,EAAWC,MAK1D9T,EAAVqC,UAAA+W,kBAAA,SAA4B1U,GACxB,QAASA,KACH7C,KAAKtC,YAAcsC,KAAKtC,WAAWmF,OACnC7C,KAAKxC,SAAWwC,KAAKuB,aAAaoI,YAAY9G,EAAM7C,KAAKxC,UAAY,MACrEwC,KAAKvC,SAAWuC,KAAKuB,aAAaoI,YAAY9G,EAAM7C,KAAKvC,UAAY,IAOrEU,EAAVqC,UAAAsU,uBAAA,SAAiCjS,GAC7B,MAAOA,IAAQ7C,KAAK2U,qBAAqB9R,EAAM7C,KAAKoV,YAChDpV,KAAKuB,aAAa0U,QAAQpT,GAAQ,MAIhC1E,EAAVqC,UAAAmU,qBAAA,SAA+B8C,EAAcC,GACzC,SAAUD,IAAMC,GAAM1X,KAAKuB,aAAa+T,SAASmC,IAAOzX,KAAKuB,aAAa+T,SAASoC,IACzE1X,KAAKuB,aAAa4T,QAAQsC,IAAOzX,KAAKuB,aAAa4T,QAAQuC,KAO/DvZ,EAAVqC,UAAAgJ,oBAAA,SAA8BsD,GAC1B,MAAQ9M,MAAKuB,aAAawL,eAAeD,IAAQ9M,KAAKuB,aAAaqJ,QAAQkC,GAAQA,EAAM,MAInF3O,EAAVqC,UAAAmV,kBACI,MAAO3V,MAAKwB,MAA4B,QAApBxB,KAAKwB,KAAK8B,sBA1QlCpG,KAAC0D,EAAAA,UAAD1C,OAAA2C,SAAA,iBACEC,SAAU,kkBACVrE,SAAU,eACVC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iKA3BAG,KAAEgK,EAAAA,YAAFJ,aAAA5J,KAAAiK,EAAAA,aA8GAjK,KAAAkK,EAAAA,eAAAN,aAAA5J,KAAAiK,EAAAA,cAnGAhJ,EAAAf,sEAwBAI,UAAAN,KAAAI,EAAAA,QAcAG,UAAAP,KAAAI,EAAAA,QASAI,aAAAR,KAAAI,EAAAA,QAQAK,iBAAAT,KAAAU,EAAAA,SAQAG,iBAAAb,KAAAU,EAAAA,SAGA4V,mBAAAtW,KAAAU,EAAAA,SAGAqZ,mBAAA/Z,KAAAe,EAAAA,UAAAC,MAAA2R,MAMA1R,kBCOE,QAAFI,GAAsB4P,EACW5M,EACCC,GAC9B,GAHkBxB,KAAtBmO,mBAAsBA,EACWnO,KAAjCuB,aAAiCA,EACCvB,KAAlCwB,KAAkCA,EAnBlCxB,KAAArC,eAAuD,GAAI4K,GAAAA,aAG3DvI,KAAAnC,aAAqD,GAAI0K,GAAAA,cAiBhDvI,KAAKuB,aACR,KAAMG,GAA2B,cAGnC1B,MAAKsU,YAActU,KAAKuB,aAAagT,QAlBzC,MAhDA5S,QAAAC,eAAMrD,EAANiC,UAAA,kBAAA,WAAwB,MAAOR,MAAKsU,iBAClC,SAAehR,GACb,GAAIkR,GAAgBxU,KAAKsU,YACnBG,EACFzU,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,KAAWtD,KAAKuB,aAAagT,OACxFvU,MAAKsU,YAActU,KAAKuB,aAAamT,UAAUD,EAAWzU,KAAKxC,QAASwC,KAAKvC,SACzEka,KAAKC,MAAM5X,KAAKuB,aAAa4T,QAAQX,GA1BjB,KA2BpBmD,KAAKC,MAAM5X,KAAKuB,aAAa4T,QAAQnV,KAAKsU,aA3BtB,KA4BtBtU,KAAK4U,yCAOXjT,OAAAC,eAAMrD,EAANiC,UAAA,gBAAA,WAA6B,MAAOR,MAAK4C,eACvC,SAAaU,GACXtD,KAAK4C,UAAY5C,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,IACxEtD,KAAK6X,cAAgB7X,KAAK4C,WAAa5C,KAAKuB,aAAa4T,QAAQnV,KAAK4C,4CAM1EjB,OAAAC,eAAMrD,EAANiC,UAAA,eAAA,WAA4B,MAAOR,MAAK+U,cACtC,SAAYzR,GACVtD,KAAK+U,SAAW/U,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,qCAM3E3B,OAAAC,eAAMrD,EAANiC,UAAA,eAAA,WAA4B,MAAOR,MAAKgV,cACtC,SAAY1R,GACVtD,KAAKgV,SAAWhV,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,qCAmCzE/E,EAAFiC,UAAA4K,mBAAE,WACEpL,KAAK4U,SAIPrW,EAAFiC,UAAAoU,MAAE,WAAA,GAAFrR,GAAAvD,IACIA,MAAK8X,WAAa9X,KAAKuB,aAAa4T,QAAQnV,KAAKuB,aAAagT,QAC9D,IAAIwD,GAAa/X,KAAKuB,aAAa4T,QAAQnV,KAAKsU,aAC5C0D,EAAeD,EAjGK,EAkGxB/X,MAAKiY,SACL,KAAK,GAAIhE,GAAI,EAAGiE,KAAoBjE,EAnGZ,GAmG8BA,IACpDiE,EAAIZ,KAAKS,EAAaC,EAAe/D,GAlGhB,GAmGjBiE,EAAIxF,SACN1S,KAAKiY,OAAOX,KAAKY,EAAInE,IAAI,SAAAoE,GAAQ,MAAA5U,GAAK6U,mBAAmBD,MACzDD,KAGJlY,MAAKmO,mBAAmBW,gBAI1BvQ,EAAFiC,UAAA6X,cAAE,SAAcF,GACZnY,KAAKnC,aAAakG,KAAK/D,KAAKuB,aAAaiU,WAAW2C,EAAM,EAAG,GAC7D,IAAIG,GAAQtY,KAAKuB,aAAa+T,SAAStV,KAAKoV,YACxC8B,EACAlX,KAAKuB,aAAa4U,kBAAkBnW,KAAKuB,aAAaiU,WAAW2C,EAAMG,EAAO,GAClFtY,MAAKrC,eAAeoG,KAAK/D,KAAKuB,aAAaiU,WAAW2C,EAAMG,EACxDX,KAAKjO,IAAI1J,KAAKuB,aAAa0U,QAAQjW,KAAKoV,YAAa8B,MAI3D3Y,EAAFiC,UAAAiV,2BAAE,SAA2BxP,GAKzB,GAAMyP,GAAQ1V,KAAK2V,QAEnB,QAAQ1P,EAAMC,SACZ,IAAK0P,GAAAA,WACH5V,KAAKoV,WAAapV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,YAAaoB,EAAQ,GAAK,EACpF,MACF,KAAKI,GAAAA,YACH9V,KAAKoV,WAAapV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,YAAaoB,GAAS,EAAI,EACpF,MACF,KAAKK,GAAAA,SACH/V,KAAKoV,WAAapV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,aArIvC,EAsInB,MACF,KAAKlI,GAAAA,WACHpM,KAAKoV,WAAapV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,YAxIvC,EAyInB,MACF,KAAK0B,GAAAA,KACHhW,KAAKoV,WAAapV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,aACrDtU,KAAKuB,aAAa4T,QAAQnV,KAAKsU,aA9IhB,GA+IpB,MACF,KAAK4B,GAAAA,IACHlW,KAAKoV,WAAapV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,YAjJtC,GAkJDtU,KAAKuB,aAAa4T,QAAQnV,KAAKsU,aAlJ9B,GAkJ4D,EAChF,MACF,KAAK8B,GAAAA,QACHpW,KAAKoV,WACDpV,KAAKuB,aAAa8U,iBACdrW,KAAKsU,YAAarO,EAAMkG,QAAS,KAvJrB,GAwJpB,MACF,KAAKoK,GAAAA,UACHvW,KAAKoV,WACDpV,KAAKuB,aAAa8U,iBACdrW,KAAKsU,YAAarO,EAAMkG,OAASoM,IA5JrB,GA6JpB,MACF,KAAK/B,GAAAA,MACHxW,KAAKqY,cAAcrY,KAAKuB,aAAa4T,QAAQnV,KAAKsU,aAClD,MACF,SAEE,OAGJtU,KAAKgT,mBAEL/M,EAAMqG,kBAGR/N,EAAFiC,UAAAgY,eAAE,WACE,MAAOxY,MAAKuB,aAAa4T,QAAQnV,KAAKoV,YA5Kd,IAgL1B7W,EAAFiC,UAAAwS,iBAAE,WACEhT,KAAKiX,iBAAiBjE,oBAIhBzU,EAAViC,UAAA4X,mBAAA,SAA6BD,GACzB,GAAIM,GAAWzY,KAAKuB,aAAamX,YAAY1Y,KAAKuB,aAAaiU,WAAW2C,EAAM,EAAG,GACnF,OAAO,IAAIrG,GAAgBqG,EAAMM,EAAUA,EAAUzY,KAAK2Y,kBAAkBR,KAItE5Z,EAAViC,UAAAmY,kBAAA,SAA4BR,GAExB,OAAanR,KAATmR,GAA+B,OAATA,GACrBnY,KAAKvC,SAAW0a,EAAOnY,KAAKuB,aAAa4T,QAAQnV,KAAKvC,UACtDuC,KAAKxC,SAAW2a,EAAOnY,KAAKuB,aAAa4T,QAAQnV,KAAKxC,SACzD,OAAO,CAIT,KAAKwC,KAAKtC,WACR,OAAO,CAMT,KAAK,GAHCkb,GAAc5Y,KAAKuB,aAAaiU,WAAW2C,EAAM,EAAG,GAGjDtV,EAAO+V,EAAa5Y,KAAKuB,aAAa4T,QAAQtS,IAASsV,EAC9DtV,EAAO7C,KAAKuB,aAAasU,gBAAgBhT,EAAM,GAC/C,GAAI7C,KAAKtC,WAAWmF,GAClB,OAAO,CAIX,QAAO,GAODtE,EAAViC,UAAAgJ,oBAAA,SAA8BsD,GAC1B,MAAQ9M,MAAKuB,aAAawL,eAAeD,IAAQ9M,KAAKuB,aAAaqJ,QAAQkC,GAAQA,EAAM,MAInFvO,EAAViC,UAAAmV,kBACI,MAAO3V,MAAKwB,MAA4B,QAApBxB,KAAKwB,KAAK8B,sBAtNlCpG,KAAC0D,EAAAA,UAAD1C,OAAA2C,SAAA,sBACEC,SAAU,odACVrE,SAAU,mBACVC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8HA3BAG,KAAEkK,EAAAA,eAAFN,aAAA5J,KAAAiK,EAAAA,cAUA5I,EAAAnB,sEAuBAI,UAAAN,KAAAI,EAAAA,QAeAG,UAAAP,KAAAI,EAAAA,QASAI,aAAAR,KAAAI,EAAAA,QAQAK,iBAAAT,KAAAU,EAAAA,SAQAC,eAAAX,KAAAU,EAAAA,SAGAqZ,mBAAA/Z,KAAAe,EAAAA,UAAAC,MAAA2R,MAMAtR,kBCYE,QAAFF,GAAsB8P,EACsC/F,EAC3B7G,EACCC,GAC9B,GAJkBxB,KAAtBmO,mBAAsBA,EACsCnO,KAA5DoI,aAA4DA,EAC3BpI,KAAjCuB,aAAiCA,EACCvB,KAAlCwB,KAAkCA,EA1BlCxB,KAAArC,eAAuD,GAAI4K,GAAAA,aAG3DvI,KAAAlC,cAAsD,GAAIyK,GAAAA,cAwBjDvI,KAAKuB,aACR,KAAMG,GAA2B,cAEnC,KAAK1B,KAAKoI,aACR,KAAM1G,GAA2B,mBAGnC1B,MAAKsU,YAActU,KAAKuB,aAAagT,QA5BzC,MA/CA5S,QAAAC,eAAMvD,EAANmC,UAAA,kBAAA,WAAwB,MAAOR,MAAKsU,iBAClC,SAAehR,GACb,GAAIkR,GAAgBxU,KAAKsU,YACnBG,EACFzU,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,KAAWtD,KAAKuB,aAAagT,OACxFvU,MAAKsU,YAActU,KAAKuB,aAAamT,UAAUD,EAAWzU,KAAKxC,QAASwC,KAAKvC,SACzEuC,KAAKuB,aAAa4T,QAAQX,KAAmBxU,KAAKuB,aAAa4T,QAAQnV,KAAKsU,cAC9EtU,KAAK4U,yCAOXjT,OAAAC,eAAMvD,EAANmC,UAAA,gBAAA,WAA6B,MAAOR,MAAK4C,eACvC,SAAaU,GACXtD,KAAK4C,UAAY5C,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,IACxEtD,KAAK6Y,eAAiB7Y,KAAK8Y,uBAAuB9Y,KAAK4C,4CAM3DjB,OAAAC,eAAMvD,EAANmC,UAAA,eAAA,WAA4B,MAAOR,MAAK+U,cACtC,SAAYzR,GACVtD,KAAK+U,SAAW/U,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,qCAM3E3B,OAAAC,eAAMvD,EAANmC,UAAA,eAAA,WAA4B,MAAOR,MAAKgV,cACtC,SAAY1R,GACVtD,KAAKgV,SAAWhV,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,qCA6CzEjF,EAAFmC,UAAA4K,mBAAE,WACEpL,KAAK4U,SAIPvW,EAAFmC,UAAAuY,eAAE,SAAeT,GACb,GAAMU,GACAhZ,KAAKuB,aAAaiU,WAAWxV,KAAKuB,aAAa4T,QAAQnV,KAAKoV,YAAakD,EAAO,EAEtFtY,MAAKlC,cAAciG,KAAKiV,EAExB,IAAM9B,GAAclX,KAAKuB,aAAa4U,kBAAkB6C,EAExDhZ,MAAKrC,eAAeoG,KAAK/D,KAAKuB,aAAaiU,WACvCxV,KAAKuB,aAAa4T,QAAQnV,KAAKoV,YAAakD,EAC5CX,KAAKjO,IAAI1J,KAAKuB,aAAa0U,QAAQjW,KAAKoV,YAAa8B,MAI3D7Y,EAAFmC,UAAAiV,2BAAE,SAA2BxP,GAKzB,GAAMyP,GAAQ1V,KAAK2V,QAEnB,QAAQ1P,EAAMC,SACZ,IAAK0P,GAAAA,WACH5V,KAAKoV,WAAapV,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,YAAaoB,EAAQ,GAAK,EACrF,MACF,KAAKI,GAAAA,YACH9V,KAAKoV,WAAapV,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,YAAaoB,GAAS,EAAI,EACrF,MACF,KAAKK,GAAAA,SACH/V,KAAKoV,WAAapV,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,aAAc,EACzE,MACF,KAAKlI,GAAAA,WACHpM,KAAKoV,WAAapV,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,YAAa,EACxE,MACF,KAAK0B,GAAAA,KACHhW,KAAKoV,WAAapV,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,aACtDtU,KAAKuB,aAAa+T,SAAStV,KAAKsU,aACrC,MACF,KAAK4B,GAAAA,IACHlW,KAAKoV,WAAapV,KAAKuB,aAAa+U,kBAAkBtW,KAAKsU,YACvD,GAAKtU,KAAKuB,aAAa+T,SAAStV,KAAKsU,aACzC,MACF,KAAK8B,GAAAA,QACHpW,KAAKoV,WACDpV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,YAAarO,EAAMkG,QAAU,IAAM,EAC/E,MACF,KAAKoK,GAAAA,UACHvW,KAAKoV,WACDpV,KAAKuB,aAAa8U,iBAAiBrW,KAAKsU,YAAarO,EAAMkG,OAAS,GAAK,EAC7E,MACF,KAAKqK,GAAAA,MACHxW,KAAK+Y,eAAe/Y,KAAKuB,aAAa+T,SAAStV,KAAKsU,aACpD,MACF,SAEE,OAGJtU,KAAKgT,mBAEL/M,EAAMqG,kBAIRjO,EAAFmC,UAAAoU,MAAE,WAAA,GAAFrR,GAAAvD,IACIA,MAAK6Y,eAAiB7Y,KAAK8Y,uBAAuB9Y,KAAKqL,UACvDrL,KAAKiZ,YAAcjZ,KAAK8Y,uBAAuB9Y,KAAKuB,aAAagT,SACjEvU,KAAKkZ,WAAalZ,KAAKuB,aAAamX,YAAY1Y,KAAKoV,WAErD,IAAI+D,GAAanZ,KAAKuB,aAAaoV,cAAc,QAEjD3W,MAAKoZ,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKrF,IAAI,SAAAmE,GAAO,MAAAA,GAAInE,IACvE,SAAAuE,GAAS,MAAA/U,GAAK8V,oBAAoBf,EAAOa,EAAWb,QACxDtY,KAAKmO,mBAAmBW,gBAI1BzQ,EAAFmC,UAAAwS,iBAAE,WACEhT,KAAKiX,iBAAiBjE,oBAOhB3U,EAAVmC,UAAAsY,uBAAA,SAAiCjW,GAC7B,MAAOA,IAAQ7C,KAAKuB,aAAa4T,QAAQtS,IAAS7C,KAAKuB,aAAa4T,QAAQnV,KAAKoV,YAC7EpV,KAAKuB,aAAa+T,SAASzS,GAAQ,MAIjCxE,EAAVmC,UAAA6Y,oBAAA,SAA8Bf,EAAegB,GACzC,GAAItH,GAAYhS,KAAKuB,aAAaqL,OAC9B5M,KAAKuB,aAAaiU,WAAWxV,KAAKuB,aAAa4T,QAAQnV,KAAKoV,YAAakD,EAAO,GAChFtY,KAAKoI,aAAayE,QAAQ0M,mBAC9B,OAAO,IAAIzH,GACPwG,EAAOgB,EAAU1C,oBAAqB5E,EAAWhS,KAAKwZ,mBAAmBlB,KAIvEja,EAAVmC,UAAAgZ,mBAAA,SAA6BlB,GAEzB,GAAMP,GAAa/X,KAAKuB,aAAa4T,QAAQnV,KAAKoV,WAElD,QAAcpO,KAAVsR,GAAiC,OAAVA,GACvBtY,KAAKyZ,4BAA4B1B,EAAYO,IAC7CtY,KAAK0Z,6BAA6B3B,EAAYO,GAChD,OAAO,CAGT,KAAKtY,KAAKtC,WACR,OAAO,CAMT,KAAK,GAHCmZ,GAAe7W,KAAKuB,aAAaiU,WAAWuC,EAAYO,EAAO,GAG5DzV,EAAOgU,EAAc7W,KAAKuB,aAAa+T,SAASzS,IAASyV,EAC7DzV,EAAO7C,KAAKuB,aAAasU,gBAAgBhT,EAAM,GAClD,GAAI7C,KAAKtC,WAAWmF,GAClB,OAAO,CAIX,QAAO,GAODxE,EAAVmC,UAAAiZ,4BAAA,SAAsCtB,EAAcG,GAChD,GAAItY,KAAKvC,QAAS,CAChB,GAAMkc,GAAU3Z,KAAKuB,aAAa4T,QAAQnV,KAAKvC,SACzCmc,EAAW5Z,KAAKuB,aAAa+T,SAAStV,KAAKvC,QAEjD,OAAO0a,GAAOwB,GAAYxB,IAASwB,GAAWrB,EAAQsB,EAGxD,OAAO,GAODvb,EAAVmC,UAAAkZ,6BAAA,SAAuCvB,EAAcG,GACjD,GAAItY,KAAKxC,QAAS,CAChB,GAAMqc,GAAU7Z,KAAKuB,aAAa4T,QAAQnV,KAAKxC,SACzCsc,EAAW9Z,KAAKuB,aAAa+T,SAAStV,KAAKxC,QAEjD,OAAO2a,GAAO0B,GAAY1B,IAAS0B,GAAWvB,EAAQwB,EAGxD,OAAO,GAODzb,EAAVmC,UAAAgJ,oBAAA,SAA8BsD,GAC1B,MAAQ9M,MAAKuB,aAAawL,eAAeD,IAAQ9M,KAAKuB,aAAaqJ,QAAQkC,GAAQA,EAAM,MAInFzO,EAAVmC,UAAAmV,kBACI,MAAO3V,MAAKwB,MAA4B,QAApBxB,KAAKwB,KAAK8B,sBArQlCpG,KAAC0D,EAAAA,UAAD1C,OAAA2C,SAAA,gBACEC,SAAU,0hBACVrE,SAAU,cACVC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iKAvBAG,KAAEgK,EAAAA,YAAFJ,aAAA5J,KAAAiK,EAAAA,aA+FAjK,KAAAkK,EAAAA,eAAAN,aAAA5J,KAAAiK,EAAAA,cApFA9I,EAAQjB,sEAkBRI,UAAAN,KAAAI,EAAAA,QAcAG,UAAAP,KAAAI,EAAAA,QASAI,aAAAR,KAAAI,EAAAA,QAQAK,iBAAAT,KAAAU,EAAAA,SAQAE,gBAAAZ,KAAAU,EAAAA,SAGAqZ,mBAAA/Z,KAAAe,EAAAA,UAAAC,MAAA2R,MAMAxR,kBZhDE,QAAFyR,GAAsB5B,EACsC6L,EAC1BxY,EAC0B6G,EAC9C4R,GAJQha,KAAtBkO,MAAsBA,EACsClO,KAA5D+Z,SAA4DA,EAC1B/Z,KAAlCuB,aAAkCA,EAC0BvB,KAA5DoI,aAA4DA,EAGxDpI,KAAK+Z,SAASE,aAAa5W,UAAU,WAAM,MAAA2W,GAAkBlL,iBA5CjE,MAgDEnN,QAAFC,eAAMkO,EAANtP,UAAA,wBAAE,WACE,GAAiC,SAA7BR,KAAK+Z,SAASG,YAChB,MAAOla,MAAKuB,aACPqL,OAAO5M,KAAK+Z,SAAS3E,WAAYpV,KAAKoI,aAAayE,QAAQsN,gBACvDvD,mBAEX,IAAiC,QAA7B5W,KAAK+Z,SAASG,YAChB,MAAOla,MAAKuB,aAAamX,YAAY1Y,KAAK+Z,SAAS3E,WAErD,IAAM2C,GAAa/X,KAAKuB,aAAa4T,QAAQnV,KAAK+Z,SAAS3E,WAK3D,OAJwBpV,MAAKuB,aAAamX,YACtC1Y,KAAKuB,aAAaiU,WAAWuC,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2B/X,KAAKuB,aAAamX,YACrC1Y,KAAKuB,aAAaiU,WAAWuC,EWtCT,GXsCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvFpW,OAAFC,eAAMkO,EAANtP,UAAA,yBAAE,WACE,MAAoC,SAA7BR,KAAK+Z,SAASG,YACjBla,KAAKkO,MAAMyD,2BAA6B3R,KAAKkO,MAAMwD,wDAIzD/P,OAAFC,eAAMkO,EAANtP,UAAA,uBAAE,WACE,OACE8X,MAAStY,KAAKkO,MAAMkD,eACpB+G,KAAQnY,KAAKkO,MAAMoD,cACnB8I,aAAcpa,KAAKkO,MAAMsD,oBACzBxR,KAAK+Z,SAASG,8CAIlBvY,OAAFC,eAAMkO,EAANtP,UAAA,uBAAE,WACE,OACE8X,MAAStY,KAAKkO,MAAMmD,eACpB8G,KAAQnY,KAAKkO,MAAMqD,cACnB6I,aAAcpa,KAAKkO,MAAMuD,oBACzBzR,KAAK+Z,SAASG,8CAIlBpK,EAAFtP,UAAA6Z,qBAAE,WACEra,KAAK+Z,SAASG,YAA2C,SAA7Bla,KAAK+Z,SAASG,YAAyB,aAAe,SAIpFpK,EAAFtP,UAAA8Z,gBAAE,WACEta,KAAK+Z,SAAS3E,WAA0C,SAA7BpV,KAAK+Z,SAASG,YACrCla,KAAKuB,aAAa+U,kBAAkBtW,KAAK+Z,SAAS3E,YAAa,GAC3DpV,KAAKuB,aAAa8U,iBACdrW,KAAK+Z,SAAS3E,WAAyC,QAA7BpV,KAAK+Z,SAASG,aAAyB,GW3ErD,KXgF1BpK,EAAFtP,UAAA+Z,YAAE,WACEva,KAAK+Z,SAAS3E,WAA0C,SAA7BpV,KAAK+Z,SAASG,YACrCla,KAAKuB,aAAa+U,kBAAkBtW,KAAK+Z,SAAS3E,WAAY,GAC1DpV,KAAKuB,aAAa8U,iBACdrW,KAAK+Z,SAAS3E,WACmB,QAA7BpV,KAAK+Z,SAASG,YAAwB,EWrF9B,KX0F1BpK,EAAFtP,UAAAga,gBAAE,WACE,OAAKxa,KAAK+Z,SAASvc,WAGXwC,KAAK+Z,SAASvc,UACjBwC,KAAKya,YAAYza,KAAK+Z,SAAS3E,WAAYpV,KAAK+Z,SAASvc,WAIhEsS,EAAFtP,UAAAka,YAAE,WACE,OAAQ1a,KAAK+Z,SAAStc,UACjBuC,KAAKya,YAAYza,KAAK+Z,SAAS3E,WAAYpV,KAAK+Z,SAAStc,UAIxDqS,EAAVtP,UAAAia,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7B5a,KAAK+Z,SAASG,YACTla,KAAKuB,aAAa4T,QAAQwF,IAAU3a,KAAKuB,aAAa4T,QAAQyF,IACjE5a,KAAKuB,aAAa+T,SAASqF,IAAU3a,KAAKuB,aAAa+T,SAASsF,GAErC,QAA7B5a,KAAK+Z,SAASG,YACTla,KAAKuB,aAAa4T,QAAQwF,IAAU3a,KAAKuB,aAAa4T,QAAQyF,GAGhEjD,KAAKC,MAAM5X,KAAKuB,aAAa4T,QAAQwF,GWlHpB,KXmHpBhD,KAAKC,MAAM5X,KAAKuB,aAAa4T,QAAQyF,GWnHjB,oBXM5B1d,KAAC0D,EAAAA,UAAD1C,OAAA2C,SAAA,sBACEC,SAAU,quBACVrE,SAAU,oBACVC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,wIAhBAG,KAAQgK,EAAAA,YAARJ,aAAA5J,KAAAiK,EAAAA,aA6IAjK,SAAa8J,GAAWF,aAAxB5J,KAAAiK,EAAAA,WAAAjK,KAAA+J,EAAAA,OAvHiC/I,MAuHjC2P,EAAAA,sBAhJA3Q,KAAQ2d,EAAAA,qBAdR/K,oDAuQA9P,KAAAuB,aAAAA,EAAEvB,KAAFoI,aAAAA,kQAFA,KAAA1G,GAAA,cAQA,KAAA1B,KAAYoI,aACZ,KAAA1G,GAAA,mBAGA1B,MAAA8a,aAAA5M,EAAAI,QAAAjL,UAAA,WACA2W,EAAAlL,eAEQvL,EAAR0W,aAAA5X,SA7CA,MAgDAV,QAAOC,eAAP5E,EAAAwD,UAAA,WACAsB,+HAtGAE,YAAA,EACAC,cAAA,mLAUAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,oMAsCAjC,KAAAia,aAAA5X,QAEAL,YAAA,EACAC,cAAA,qDAIAH,6EACA9B,KAAA+a,sBAAA,GAEA/Y,YAAA,EACAC,cAAA,wHA2BAjC,KAAAoV,WAAApV,KAAAzC,SAAAyC,KAAAuB,aAAAgT,QAEIvU,KAAKgb,aAAThb,KAAAib,iFAMAjb,KAAA+a,sBAAA,EACQ/a,KAAKW,uFAMbX,KAAAia,aAAAzX,wFAKA,IAAA0Y,IAAAA,EAAAC,YAAA,CACA,GAAAC,GAAApb,KAA0Bqb,0BAE1BD,IACAA,EAAAxG,QAIA5U,KAAOia,aAAP5X,sLAWArC,KAAArC,eAAAoG,KAAAlB,8RAqBA7C,KAAAka,YAAAkB,0OAeApe,EAAA8J;4+BAnNAxK,QAAA,67CACEC,MACFC,MAAA,gBAEEC,SAAF,cACEC,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAC,EAAAC,eAAA,WAAA,QACAC,KAAAC,2KA/IAH,EAAQI,gBA2PRC,kBAAAH,KAAAI,EAAAA,QAzQAC,UAAAL,KAAAI,EAAAA,6DAgKAE,UAAAN,KAAAI,EAAAA,QAeAG,UAAAP,KAAGI,EAAAA,QAQHI,aAAAR,KAAAI,EAAAA,QAGAK,iBAAGT,KAAHU,EAAAA,SAQAC,eAAAX,KAAQU,EAAAA,SAQRE,gBAAGZ,KAAHU,EAAAA,SAQAG,iBAAAb,KAAAU,EAAAA,SAGAI,YAAAd,KAAAe,EAAAA,UAASC,MAATC,KAMAC,WAAAlB,KAAAe,EAAAA,UAAAC,MAAAG,KAMAC,gBAAApB,KAAGe,EAAAA,UAAHC,MAAAK,MAMAvB,KChOawB,GAKXC,eAAgBC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQC,EAAAA,OAAOC,QAAS,EAAGC,UAAW,iBAC5CH,EAAAA,MAAM,QAASC,EAAAA,OAAOC,QAAS,EAAGC,UAAW,iBAC7CC,EAAAA,WAAW,gBAAiBC,EAAAA,OAC1BC,EAAAA,MAAM,kBAAmBC,EAAAA,gBACzBC,EAAAA,QAAQ,6CAEVJ,EAAAA,WAAW,YAAaI,EAAAA,QAAQ,eAAgBP,EAAAA,OAAOC,QAAS,QAIlEO,eAAgBV,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQC,EAAAA,OAAOC,QAAS,KAC9BF,EAAAA,MAAM,QAASC,EAAAA,OAAOC,QAAS,KAC/BE,EAAAA,WAAW,YAAaI,EAAAA,QAAQ,oDCShCE,EAAgB,EAGPC,EACT,GAAIC,GAAAA,eAAqC,kCAQhCC,GACXC,QAASH,EACTI,MAAOC,EAAAA,SACPC,WAAYC,GAKdC,EAAA,WACE,QAAFA,GAAqBC,GAAAC,KAArBD,YAAqBA,EArErB,MAAAD,MAuEaG,EAAiCC,EAAAA,WAAWJ,iBAwCvD,QAAFK,GAAcC,GACd,MAAIC,GAAJC,KAAAN,KAAUI,IAAVJ,KATA,MAJ6CO,GAA7CJ,EAAAE,GAgBEF,EAAFK,UAAAC,gBAAE,WACET,KAAKU,UAAUC,kCApCnBzD,KAAC0D,EAAAA,UAAD1C,OAAA2C,SAAA,yBACEC,SAAU,yjBACVxE,QAAF,+sBACEC,MACFC,MAAA,yBACMuE,oBAAN,UACIC,uCAAJ,sBAEAC,YACAzC,EAAAC,eACAD,EAAAY,gBAEA3C,SAAA,uBACAC,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEmE,QAAF,sEArEAf,EAAA/C,yDA6EA+C,iEAoKAH,KAAAmB,SAAAA,EAAsBnB,KAAtBoB,QAAsBA,EACApB,KAAtBqB,kBAAAA,EACsBrB,KAAtBsB,gBAAAA,EACsBtB,KAAtBuB,aAAAA,EAC8DvB,KAA9DwB,KAAAA,EACkCxB,KAAlCyB,UAA8CA,ibAP9C,KAAAC,GAA8C,eA3D9C,MAuEAC,QAAAC,eAAAC,EAAArB,UAAA,WACAsB,+FAxIAC,0FAGAC,YAAA,EACAC,cAAA,2JAUAF,+BAGAC,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,wKAOAF,gDAEAG,KAAAlC,KAAAmC,YACAnC,KAAAmC,UAAUD,EAEFlC,KAARoC,gBAAAC,KAAAH,KAGAF,YAAA,EACAC,cAAA,8IA4BEA,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDA0CAjC,KAAAsC,mBAAAC,cACIvC,KAAKoC,gBAATI,WACQxC,KAARyC,YACQzC,KAARyC,UAAAC,UAEQ1C,KAAK2C,mBAAb,2DAOA3C,MAAA4C,UAAAC,EACA7C,KAAAuB,aAAAuB,SAAmBC,EAAnB/C,KAAkC4C,YAC1B5C,KAARgD,iBAAAX,KAAAQ,qLAoBA,IAAA7C,KAAAiD,iBAAA,KAAAC,OAAA,8DAEAlD,MAAAiD,iBAAAE,EACAnD,KAAAsC,mBACQtC,KAARiD,iBAAAG,aAAAC,UAAA,SAAAC,GAAA,MAAAC,GAAAX,UAAAU,mEAQA,IAAAtD,KAAYiD,iBACZ,KAAAC,OAAA,+DAEMlD,MAANyB,YACAzB,KAAAwD,0BAAAxD,KAAAyB,UAAAgC,eAEAzD,KAAA0D,QAAA1D,KAAA2D,gBAAA3D,KAAA4D,eACA5D,KAAA6D,SAAA,EAEI7D,KAAK8D,aAATC,gDAMA,IAAA/D,KAAA6D,QAAA,CAEM7D,KAANyC,WAAAzC,KAAAyC,UAAAuB,eACAhE,KAAAyC,UAAAwB,SAEMjE,KAAKkE,aACXlE,KAAAkE,WAAAC,QACQnE,KAAKkE,WAAa,MAEpBlE,KAAKoE,iBAAXpE,KAAAoE,gBAAAC,YACArE,KAAAoE,gBAAAH,QAEA,IAAAK,GAAA,oCAMUf,EAAKgB,aAAfR,OACQR,EAAKC,0BAAb,MAGAxD,MAAAwD,2BACA,kBAAAxD,MAAAwD,0BAAAgB,6DAWAF,qIAOQG,iBAAkBzE,KAA1BqB,kBACMqD,WAAN,0BAEA1E,KAAAkE,WAAkBS,cAAlBtB,UAAA,WAAA,MAAAE,GAAAY,UACAnE,KAAAkE,WAAAU,kBAAAC,WAAA7E,KAEIA,KAAK8E,yJAQT9E,KAAAyC,WAEAzC,KAAA+E,eAGA/E,KAAAyC,UAAAuB,gBACAhE,KAAA2C,mBAAA3C,KAAAyC,UAAAuC,OAAAhF,KAAAoE,iBAEQpE,KAAK2C,mBAAbsC,SAAAJ,WAAA7E,KACMA,KAAK8E,YAEL9E,KAAKoB,QAAX8D,SAAAC,eAAAC,KAAAC,EAAAA,KAAA,IAAAhC,UAAA,uKAWAiC,aAAA,EACMC,cAAN,mCACMC,UAAWxF,KAAjBwB,KACMiE,eAANzF,KAAAsB,kBACMoD,WAAN,wBAEA1E,MAAAyC,UAAAzC,KAAAmB,SAAAuE,OAAwCC,GACxCC,EAAAA,MAAA5F,KAAAyC,UAAAoD,gBAAA7F,KAAAyC,UAAAqD,cAAA9F,KAAAyC,UAAAsD,gBAAAX,KAAAY,EAAAA,OAAA,SAAAC,GAIA,MACWA,GADXC,UAAAC,EAAAA,iEAKA9C,UAAA,WAAiC,MAAjCE,GAAAY,yKAQAiC,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACOC,UAAP,GACOC,gBAEPC,QAAA,QACAC,QAAA,SACUC,SAAV,QACUC,SAAV,QAGAH,QAAA,QACAC,QAAA,MACUC,SAAV,QACUC,SAAV,WAGAH,QAAA,MACAC,QAAA,SACUC,SAAV,MACUC,SAAV,QAGAH,QAAA,MACAC,QAAA,MACUC,SAAV,MACUC,SAAV,sNAiBA5G,KAAA2C,mBAAAsC,SAAA4B,MAAAA,GAEM7G,KAAKkE,aACXlE,KAAAkE,WAAAU,kBAAAiC,MAAAA,IAGAhF,EAAAiF,2EA/WArK,SAAA,gBACEI,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAiF,EAAA5E,eAAiB,WAAjB,QACAC,KAAA6J,EAAAA,uEA5FA7J,SAAQ8J,GAARF,aAAA5J,KAAA+J,EAAAA,OAAA/I,MAAAoB,OA5BApC,KAAEgK,EAAAA,YAAFJ,aAAA5J,KAAAiK,EAAAA,aAmBAjK,KAAEkK,EAAAA,eAAFN,aAAA5J,KAAAiK,EAAAA,aAIAjK,SAAE8J,GAAFF,aAAA5J,KAAAiK,EAAAA,WAAAjK,KAAA+J,EAAAA,OAAA/I,MAAAmJ,EAAAA,eAIAxF,EAAAzE,gBA/BAkK,0BAAApK,KAAAI,EAAAA,QA0QAC,UAAAL,KAAAI,EAAAA,0DA3IAoG,UAAAxG,KAAAI,EAAAA,QAGAiK,WAAArK,KAAAI,EAAAA,QAYAO,eAAAX,KAAAU,EAAAA,SAGAE,gBAAAZ,KAAAU,EAAAA,SAcA8G,aAAAxH,KAAAI,EAAAA,QAQAwG,eAAA5G,KAAAU,EAAAA,OAAAM,MAAA,YAmBAqG,eAAArH,KAAGU,EAAAA,OAAHM,MAAA,YAMAsJ,SAAAtK,KAAAI,EAAAA,SAMAuE,KCtKa4F,GACXhI,QAASiI,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAC,KAC9BC,OAAO,GAIIC,GACXtI,QAASuI,EAAAA,cACTL,YAAaC,EAAAA,WAAW,WAAM,MAAAC,KAC9BC,OAAO,GASTG,EAAA,WAIE,QAAFA,GAEWC,EAEAC,GAFAnI,KAAXkI,OAAWA,EAEAlI,KAAXmI,cAAWA,EACPnI,KAAKsD,MAAQtD,KAAKkI,OAAO5E,MApE7B,MAAA2E,mBA4OE,QAAFJ,GACc9H,EACWwB,EAC2B6G,EAC1BC,GAJxB,GAAF9E,GAAAvD,IAKI,IAJUA,KAAdD,YAAcA,EACWC,KAAzBuB,aAAyBA,EAC2BvB,KAApDoI,aAAoDA,EAC1BpI,KAA1BqI,WAA0BA,EA/D1BrI,KAAAsI,WAAM,GAAIC,GAAAA,aAIVvI,KAAAwI,UAAM,GAAID,GAAAA,aAGVvI,KAAAoD,aAAiB,GAAImF,GAAAA,aAGrBvI,KAAAoC,gBAAoB,GAAImG,GAAAA,aAExBvI,KAAAyI,WAAe,aAEfzI,KAAA0I,aAA+C,aAE/C1I,KAAA2I,mBAA+B,aAE/B3I,KAAA4I,wBAAoCC,EAAAA,aAAaC,MAEjD9I,KAAA+I,oBAAgCF,EAAAA,aAAaC,MAG7C9I,KAAAgJ,gBAAyC,WACrC,MAAOzF,GAAK0F,gBACR,MAAQC,oBAAuBC,KAAQ5F,EAAKxD,YAAYqJ,cAAc9F,SAI9EtD,KAAAqJ,cAAuC,SAACC,GACpC,GAAMC,GAAehG,EAAKiG,oBAAoBjG,EAAKhC,aAAakI,YAAYH,EAAQhG,OACpF,QAASC,EAAKmG,MAAQH,GAClBhG,EAAKhC,aAAaoI,YAAYpG,EAAKmG,IAAKH,IAAiB,EACzD,MAAQK,kBAAqBF,IAAOnG,EAAKmG,IAAKG,OAAUN,KAIhEvJ,KAAA8J,cAAuC,SAACR,GACpC,GAAMC,GAAehG,EAAKiG,oBAAoBjG,EAAKhC,aAAakI,YAAYH,EAAQhG,OACpF,QAASC,EAAKwG,MAAQR,GAClBhG,EAAKhC,aAAaoI,YAAYpG,EAAKwG,IAAKR,IAAiB,EACzD,MAAQS,kBAAqBD,IAAOxG,EAAKwG,IAAKF,OAAUN,KAIhEvJ,KAAAiK,iBAA0C,SAACX,GACvC,GAAMC,GAAehG,EAAKiG,oBAAoBjG,EAAKhC,aAAakI,YAAYH,EAAQhG,OACpF,OAAQC,GAAK2G,aAAgBX,IAAgBhG,EAAK2G,YAAYX,IAClDY,qBAAuB,GAA/B,MAKRnK,KAAAoK,WAAMC,EAAAA,WAAWC,SACNtK,KAAKgJ,gBAAiBhJ,KAAKqJ,cAAerJ,KAAK8J,cAAe9J,KAAKiK,mBAG9EjK,KAAAiJ,iBAA4B,GAOnBjJ,KAAKuB,aACR,KAAMG,GAA2B,cAEnC,KAAK1B,KAAKoI,aACR,KAAM1G,GAA2B,mBAInC1B,MAAK+I,oBAAsBxH,EAAagJ,cAAclH,UAAU,WAC9DE,EAAKD,MAAQC,EAAKD,QA1PxB,MAkGA3B,QAAAC,eAAMiG,EAANrH,UAAA,qBAAA,SAAoB8C,GAChBtD,KAAKwK,mBAAmBlH,oCAIlBuE,EAAVrH,UAAAgK,mBAAA,SAA6BlH,GACrBA,IACFtD,KAAKyK,YAAcnH,EACnBtD,KAAKyK,YAAYC,eAAe1K,QAMtC2B,OAAAC,eAAMiG,EAANrH,UAAA,2BAAA,SAA0B8C,GACtBtD,KAAKkK,YAAc5G,EACnBtD,KAAK2I,sDAMThH,OAAAC,eAAMiG,EAANrH,UAAA,aAAA,WAA0B,MAAOR,MAAK2K,YACpC,SAAUrH,GACRA,EAAQtD,KAAKuB,aAAakI,YAAYnG,GACtCtD,KAAKiJ,iBAAmB3F,GAAStD,KAAKuB,aAAaqJ,QAAQtH,GAC3DA,EAAQtD,KAAKwJ,oBAAoBlG,EACjC,IAAMuH,GAAU7K,KAAKsD,KACrBtD,MAAK2K,OAASrH,EACdtD,KAAK8K,aAAaxH,GAEbtD,KAAKuB,aAAauB,SAAS+H,EAASvH,IACvCtD,KAAKoD,aAAaW,KAAKT,oCAO7B3B,OAAAC,eAAMiG,EAANrH,UAAA,WAAA,WAAwB,MAAOR,MAAK+K,UAClC,SAAQzH,GACNtD,KAAK+K,KAAO/K,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,IACnEtD,KAAK2I,sDAMThH,OAAAC,eAAMiG,EAANrH,UAAA,WAAA,WAAwB,MAAOR,MAAKgL,UAClC,SAAQ1H,GACNtD,KAAKgL,KAAOhL,KAAKwJ,oBAAoBxJ,KAAKuB,aAAakI,YAAYnG,IACnEtD,KAAK2I,sDAMThH,OAAAC,eAAMiG,EAANrH,UAAA,gBAAA,WAA4B,QAASR,KAAKmC,eACxC,SAAamB,GACX,GAAMpB,GAAW+I,EAAAA,sBAAsB3H,GACjC4H,EAAUlL,KAAKD,YAAYqJ,aAE7BpJ,MAAKmC,YAAcD,IACrBlC,KAAKmC,UAAYD,EACjBlC,KAAKoC,gBAAgB2B,KAAK7B,IAIxBA,GAAYgJ,EAAQC,MAItBD,EAAQC,wCAoFZtD,EAAFrH,UAAA4K,mBAAE,WAAA,GAAF7H,GAAAvD,IACQA,MAAKyK,cACPzK,KAAK4I,wBAA0B5I,KAAKyK,YAAYzH,iBAAiBK,UAAU,SAACgI,GAC1E9H,EAAKD,MAAQ+H,EACb9H,EAAKmF,aAAa2C,GAClB9H,EAAKkF,aACLlF,EAAKiF,UAAUzE,KAAK,GAAIkE,GAAwB1E,EAAMA,EAAKxD,YAAYqJ,gBACvE7F,EAAK+E,WAAWvE,KAAK,GAAIkE,GAAwB1E,EAAMA,EAAKxD,YAAYqJ,oBAK9EvB,EAAFrH,UAAA8K,YAAE,WACEtL,KAAK4I,wBAAwBrG,cAC7BvC,KAAK+I,oBAAoBxG,cACzBvC,KAAKoD,aAAaZ,WAClBxC,KAAKoC,gBAAgBI,YAIvBqF,EAAFrH,UAAA+K,0BAAE,SAA0BC,GACxBxL,KAAK2I,mBAAqB6C,GAI5B3D,EAAFrH,UAAAiL,SAAE,SAASC,GACP,MAAO1L,MAAKoK,WAAapK,KAAKoK,WAAWsB,GAAK,MAOhD7D,EAAFrH,UAAAmL,6BAAE,WACE,MAAO3L,MAAK4L,6BAOd/D,EAAFrH,UAAAoL,0BAAE,WACE,MAAO5L,MAAKqI,WAAarI,KAAKqI,WAAWuD,4BAA8B5L,KAAKD,aAI9E8H,EAAFrH,UAAAqL,WAAE,SAAWvI,GACTtD,KAAKsD,MAAQA,GAIfuE,EAAFrH,UAAAsL,iBAAE,SAAiBN,GACfxL,KAAK0I,aAAe8C,GAItB3D,EAAFrH,UAAAuL,kBAAE,SAAkBP,GAChBxL,KAAKyI,WAAa+C,GAIpB3D,EAAFrH,UAAAwL,iBAAE,SAAiBC,GACfjM,KAAKuH,SAAW0E,GAGlBpE,EAAFrH,UAAA0L,WAAE,SAAWjG,GACLA,EAAMkG,QAAUlG,EAAMC,UAAYkG,EAAAA,aACpCpM,KAAKyK,YAAY4B,OACjBpG,EAAMqG,mBAIVzE,EAAFrH,UAAA+L,SAAE,SAASjJ,GACP,GAAIT,GAAO7C,KAAKuB,aAAaiL,MAAMlJ,EAAOtD,KAAKoI,aAAaoE,MAAMhE,UAClExI,MAAKiJ,iBAAmBpG,GAAQ7C,KAAKuB,aAAaqJ,QAAQ/H,GAC1DA,EAAO7C,KAAKwJ,oBAAoB3G,GAE3B7C,KAAKuB,aAAauB,SAASD,EAAM7C,KAAK2K,UACzC3K,KAAK2K,OAAS9H,EACd7C,KAAK0I,aAAa7F,GAClB7C,KAAKoD,aAAaW,KAAKlB,GACvB7C,KAAKwI,UAAUzE,KAAK,GAAIkE,GAAwBjI,KAAMA,KAAKD,YAAYqJ,kBAI3EvB,EAAFrH,UAAAiM,UAAE,WACEzM,KAAKsI,WAAWvE,KAAK,GAAIkE,GAAwBjI,KAAMA,KAAKD,YAAYqJ,iBAI1EvB,EAAFrH,UAAAkM,iBAAE,WACE,MAAO1M,MAAKqI,WAAarI,KAAKqI,WAAWxB,UAAQG,IAInDa,EAAFrH,UAAAmM,QAAE,WAEM3M,KAAKsD,OACPtD,KAAK8K,aAAa9K,KAAKsD,OAGzBtD,KAAKyI,cAICZ,EAAVrH,UAAAsK,aAAA,SAAuBxH,GACnBtD,KAAKD,YAAYqJ,cAAc9F,MAC3BA,EAAQtD,KAAKuB,aAAaqL,OAAOtJ,EAAOtD,KAAKoI,aAAayE,QAAQrE,WAAa,IAO7EX,EAAVrH,UAAAgJ,oBAAA,SAA8BsD,GAC1B,MAAQ9M,MAAKuB,aAAawL,eAAeD,IAAQ9M,KAAKuB,aAAaqJ,QAAQkC,GAAQA,EAAM,qBAvS7F5P,KAAC8P,EAAAA,UAAD9O,OACE2C,SAAU,uBACVoM,WACExF,EACAM,GACCtI,QAASyN,EAAAA,yBAA0BvF,YAAaE,IAEnDtL,MACE4Q,uBAAwB,OACxBC,mBAAoB,kDACpBC,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZC,SAAU,YACVC,YAAa,sBAEflR,SAAU,6DA/EZS,KAAE0Q,EAAAA,aAmBF1Q,KAAQgK,EAAAA,YAARJ,aAAA5J,KA8MOiK,EAAAA,aACPjK,SAAA8J,GAAAF,aAAA5J,KAAOiK,EAAAA,WAAPjK,KAAmB+J,EAAAA,OAAnB/I,MAA0B2P,EAAAA,sBA9M1B3Q,KAAQ4Q,EAAAA,aAARhH,aAAA5J,KA+MOiK,EAAAA,gCA/IP4G,gBAAA7Q,KAAGI,EAAAA,QAcH6M,sBAAAjN,KAAGI,EAAAA,QAQHgG,QAAApG,KAAGI,EAAAA,QAiBHoM,MAAAxM,KAAGI,EAAAA,QASHyM,MAAA7M,KAAGI,EAAAA,QASHiK,WAAArK,KAAGI,EAAAA,QAsBHgL,aAAApL,KAAGU,EAAAA,SAIH4K,YAAAtL,KAAGU,EAAAA,UApLHiK,gCCAA,sBA4BA3K,KAAC8P,EAAAA,UAAD9O,OACE2C,SAAU,gCA7BZmN,kBAoEE,QAAFC,GAAqBC,EAAkCC,GAAlCnO,KAArBkO,MAAqBA,EAAkClO,KAAvDmO,mBAAuDA,EAlBvDnO,KAAAoO,cAA0BvF,EAAAA,aAAaC,MAgBvC,MATAnH,QAAAC,eAAMqM,EAANzN,UAAA,2BACI,WAA0BwG,KAAnBhH,KAAKmC,UAA0BnC,KAAK6E,WAAW0C,WAAavH,KAAKmC,eAE1E,SAAamB,GACXtD,KAAKmC,UAAY8I,EAAAA,sBAAsB3H,oCASzC2K,EAAFzN,UAAA6N,YAAE,SAAYC,GACNA,EAAR,YACMtO,KAAKuO,sBAITN,EAAFzN,UAAA8K,YAAE,WACEtL,KAAKoO,cAAc7L,eAGrB0L,EAAFzN,UAAA4K,mBAAE,WACEpL,KAAKuO,sBAGPN,EAAFzN,UAAAgO,MAAE,SAAMvI,GACAjG,KAAK6E,aAAe7E,KAAKuH,WAC3BvH,KAAK6E,WAAWwH,OAChBpG,EAAMwI,oBAIFR,EAAVzN,UAAA+N,yCACUG,EAAqB1O,KAAK6E,WAAa7E,KAAK6E,WAAWzC,gBAAkBuM,EAAAA,KACzEC,EAAgB5O,KAAK6E,YAAc7E,KAAK6E,WAAW5B,iBACrDjD,KAAK6E,WAAW5B,iBAAiBb,gBAAkBuM,EAAAA,KACjDE,EAAoB7O,KAAK6E,WAC3Be,EAAAA,MAAM5F,KAAK6E,WAAWf,aAAc9D,KAAK6E,WAAWN,cACpDoK,EAAAA,IAEJ3O,MAAKoO,cAAc7L,cACnBvC,KAAKoO,cAAgBxI,EAAAA,MACnB5F,KAAKkO,MAAMI,QACXI,EACAE,EACAC,GACAxL,UAAU,WAAM,MAAAE,GAAK4K,mBAAmBW,iCAvE9C5R,KAAC0D,EAAAA,UAAD1C,OAAA2C,SAAA,wBACEC,SAAU,4hBACVxE,QAAF,quBACEC,MACFC,MAAA,wBACMuS,uCAAN,kCACIC,qBAAJ,8CACIC,mBAAJ,6CAEAxS,SAAA,sBACAC,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFAjCAkR,EAAA7Q,mFAyCA8R,cAAAhS,KAAAiS,EAAAA,aAAAjR,MAAA8P,MAaAC,gCClEA,sBA8BA/Q,KAACkS,EAAAA,SAADlR,OACEmR,SACEC,EAAAA,aACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,WACAC,EAAAA,cAEFC,SACE5S,EACA6S,EACAhO,EACA1B,EACA0H,EACAoG,EACAD,EACA7P,EACAE,EACAE,EACAuR,GAEFC,cACE/S,EACA6S,EACAhO,EACA1B,EACA0H,EACAoG,EACAD,EACA7P,EACAE,EACAE,EACAuR,GAEF7C,WACE9P,EACAqC,GAEFwQ,iBACE7P,EACA2P,OAvEJG"}